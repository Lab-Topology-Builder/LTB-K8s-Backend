{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LTB K8s Backend Documentation","text":"<p>The LTB K8s Backend manages LTB Lab Template Deployments and User management.</p>"},{"location":"coding-conventions/","title":"Coding Conventions","text":""},{"location":"coding-conventions/#naming","title":"Naming","text":"<p>The following naming conventions are used in the project:</p>"},{"location":"coding-conventions/#naming-conventions-in-go","title":"Naming conventions in Go","text":"<ul> <li>camelCase for variables and functions</li> <li>PascalCase for types and functions that need to be exported</li> </ul>"},{"location":"coding-conventions/#examples","title":"Examples","text":"<ul> <li>labStatus: variable name for a status of a lab instance</li> <li>GetLabStatus: name for an exported function</li> </ul>"},{"location":"coding-conventions/#coding","title":"Coding","text":"<ul> <li>The Go extension in VSCode has a linting capability, so that will be used for linting.</li> </ul>"},{"location":"concepts/","title":"Concepts","text":""},{"location":"concepts/#lab-topology-builder-ltb","title":"Lab Topology Builder (LTB)","text":"<p>LTB is a tool that allows you to build a topology of virtual machines and containers, which are connected to each other according to the network topology you have defined.</p>"},{"location":"concepts/#ltb-kubernetes-operator","title":"LTB Kubernetes Operator","text":"<p>LTB Kubernetes Operator is a custom Kubernetes controller that allows you to deploy and manage applications and their components on Kubernetes using custom resources.</p>"},{"location":"concepts/#custom-resource-cr","title":"Custom Resource (CR)","text":"<p>Custom Resource is an extension of LTB Kubernetes API that allows you to create your own objects and store them in the Kubernetes cluster.  In LTB, CR is the YAML file that is provided by the user.</p>"},{"location":"concepts/#custom-resource-definition-crd","title":"Custom Resource Definition (CRD)","text":"<p>Custom Resource Definition (CRD) is a Kubernetes API that allows you to define your own custom resources.</p>"},{"location":"concepts/#kubernetes-cluster","title":"Kubernetes Cluster","text":"<p>Kubernetes Cluster is a set of nodes that run containerized applications managed by Kubernetes.</p>"},{"location":"concepts/#lab-template","title":"Lab Template","text":"<p>Lab Template is a YAML file that defines the topology of the lab. It contains information about the devices that are part of the lab, as well as the network topology.</p>"},{"location":"concepts/#device","title":"Device","text":"<p>A device is either a KubeVirt VM or a container. It has a device type, a device version, and a device name.</p>"},{"location":"concepts/#lab","title":"Lab","text":"<p>Lab is a YAML file (CR) that defines a lab instance. It holds the details from the lab template, and some additional information, such as the lab name. It also has a status field that is updated by the Kubernetes operator.</p>"},{"location":"concepts/#lab-instance-lab-ltb","title":"Lab Instance (Lab) (LTB)","text":"<p>Lab Instance is a deployment of the lab template. It is deployed by the Kubernetes Operator in the Kubernetes cluster.</p>"},{"location":"dev-setup/","title":"Development setup","text":""},{"location":"dev-setup/#prerequisites","title":"Prerequisites","text":"<p>WSL version 0.67.6 and higher</p> <p>Active Ubuntu WSL needed: <pre><code>sudo vim /etc/wsl.conf\n</code></pre> <pre><code># /etc/wsl.conf\n[boot]\nsystemd=true\n</code></pre> Restart WSL with <code>wsl.exe --shutdown</code> and opening the WSL again.</p>"},{"location":"dev-setup/#option-1-k3s-install","title":"Option 1: K3S install","text":"<p><pre><code>sudo mkdir -p /etc/rancher/k3s/\nsudo vim /etc/rancher/k3s/config.yaml\nwrite-kubeconfig-mode: \"0644\"\n</code></pre> <pre><code>curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=\"v1.26.1+k3s1\" sudo -E sh -\n</code></pre></p>"},{"location":"dev-setup/#option-2-k3d-install","title":"Option 2: K3D install","text":"<p>Prerequisites: Docker Desktop installed and running or Docker installed in WSL <pre><code>curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | TAG=v5.4.7 bash\n</code></pre></p>"},{"location":"dev-setup/#operator-sdk-install","title":"Operator SDK install","text":""},{"location":"dev-setup/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>curl</li> <li>gpg\u00a0version 2.0+</li> </ul>"},{"location":"dev-setup/#1-download-the-release-binary","title":"1. Download the release binary","text":"<p>Set platform information: <pre><code>export ARCH=$(case $(uname -m) in x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(uname -m) ;; esac)\nexport OS=$(uname | awk '{print tolower($0)}')\n</code></pre></p> <p>Download the binary for your platform:</p> <pre><code>export OPERATOR_SDK_Version=1.26.1\nexport OPERATOR_SDK_DL_URL=https://github.com/operator-framework/operator-sdk/releases/download/${OPERATOR_SDK_Version}\ncurl -LO ${OPERATOR_SDK_DL_URL}/operator-sdk_${OS}_${ARCH}\n</code></pre>"},{"location":"dev-setup/#2-verify-the-downloaded-binary-optional","title":"2. Verify the downloaded binary (Optional)","text":"<p>Import the operator-sdk release GPG key from\u00a0<code>keyserver.ubuntu.com</code>:</p> <pre><code>gpg --keyserver keyserver.ubuntu.com --recv-keys 052996E2A20B5C7E\n</code></pre> <p>Download the checksums file and its signature, then verify the signature (optional):</p> <pre><code>curl -LO ${OPERATOR_SDK_DL_URL}/checksums.txt\ncurl -LO ${OPERATOR_SDK_DL_URL}/checksums.txt.asc\ngpg -u \"Operator SDK (release) &lt;cncf-operator-sdk@cncf.io&gt;\" --verify checksums.txt.asc\n</code></pre> <p>You should see something similar to the following:</p> <pre><code>gpg: assuming signed data in 'checksums.txt'\ngpg: Signature made Fri 30 Oct 2020 12:15:15 PM PDT\ngpg:                using RSA key ADE83605E945FA5A1BD8639C59E5B47624962185\ngpg: Good signature from \"Operator SDK (release) &lt;cncf-operator-sdk@cncf.io&gt;\" [ultimate]\n</code></pre> <p>Make sure the checksums match:</p> <pre><code>grep operator-sdk_${OS}_${ARCH} checksums.txt | sha256sum -c -\n</code></pre> <p>You should see something similar to the following:</p> <pre><code>operator-sdk_linux_amd64: OK\n</code></pre>"},{"location":"dev-setup/#3-install-the-release-binary-in-your-path","title":"3. Install the release binary in your PATH","text":"<p><pre><code>chmod +x operator-sdk_${OS}_${ARCH} &amp;&amp; sudo mv operator-sdk_${OS}_${ARCH} /usr/local/bin/\n</code></pre> Verify the installation:</p> <pre><code>operator-sdk version\n</code></pre>"},{"location":"dev-setup/#install-go","title":"Install Go","text":"<p>Step 1 - Downloading Go lang binary files Visit official downloads page and grab file using either wget command or curl command: <pre><code># let us download a file with curl on Linux command line #\nGO_VERSION=\"1.20.1\" # go version\nARCH=\"amd64\" # go archicture\nwget -L \"https://golang.org/dl/go${GO_VERSION}.linux-${ARCH}.tar.gz\"\nrm -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf go1.20.1.linux-amd64.tar.gz\n</code></pre></p> <p>Step 2  - Add to PATH <pre><code>echo 'export PATH=\"$PATH:/usr/local/go/bin\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre></p> <p>Step 3 - Verify that you've installed Go by opening a command prompt and typing the following command: <pre><code>go version\n</code></pre></p>"},{"location":"architecture/k8s-ltb-architecture/","title":"Kubernetes Lab Topology Builder Architecture","text":"<p>The Kubernetes Lab Topology Builder (K8s-LTB) is a Kubernetes native version of the Lab Topology Builder (LTB). It is composed of a Frontend and a Backend.</p> <p></p>"},{"location":"architecture/k8s-ltb-architecture/#frontend","title":"Frontend","text":"<p>The frontend is responsible for the following tasks:</p> <ul> <li>Providing a web UI for the user to interact with the labs.</li> <li>Providing a web UI for the admin to manage:</li> <li>users</li> <li>lab templates</li> <li>lab deployments</li> <li>reservations</li> </ul>"},{"location":"architecture/k8s-ltb-architecture/#backend","title":"Backend","text":"<p>The backend is composed of the following components:</p> <ul> <li>API</li> <li>Operator</li> </ul> <p>The backend is responsible for the following tasks:</p> <ul> <li>parsing the yaml topology files</li> <li>deploying/destroying the containers and vms</li> <li>exposes status of lab deployments</li> <li>exposes information on how to access the deployed containers and vms</li> <li>provides remote ssh capabilities</li> <li>provides remote Wireshark capture capabilities</li> <li>managing reservations (create, delete, etc.)</li> <li>exposes node resource usage</li> <li>user management</li> <li>exposes information about a device (version, groups, etc.)</li> </ul>"},{"location":"architecture/k8s-ltb-architecture/#c4-model","title":"C4 Model","text":""},{"location":"architecture/k8s-ltb-architecture/#system-context-diagram","title":"System Context Diagram","text":""},{"location":"architecture/k8s-ltb-architecture/#container-diagram","title":"Container Diagram","text":""},{"location":"architecture/k8s-ltb-architecture/#component-diagram","title":"Component Diagram","text":""},{"location":"architecture/kvm-docker-ltb-architecture/","title":"Current (KVM/Docker)-base LTB Architecture","text":"<p>Currently the KVM/Docker based LTB is composed of the following containers:</p> <ul> <li>Frontend built with React</li> <li>Backend built with Django</li> <li>Deployment built with docker-compose</li> </ul>"},{"location":"architecture/kvm-docker-ltb-architecture/#backend","title":"Backend","text":"<p>The backend is accessible via API and a Admin Web UI. It is responsible for the following tasks:</p> <ul> <li>parsing the yaml topology files</li> <li>deploying/destroying the containers and vms</li> <li>exposes status of lab deployments</li> <li>exposes information on how to access the deployed containers and vms</li> <li>provides remote ssh capabilities</li> <li>provides remote Wireshark capture capabilities</li> <li>managing reservations (create, delete, etc.)</li> <li>exposes node resource usage</li> <li>user management</li> <li>exposes information about a device (version, groups, etc.)</li> </ul> <p>It is composed of the following components:</p> <ul> <li>Reservations</li> <li>Running lab store</li> <li>Template store</li> <li>Authentication</li> </ul> <p>The orchestration component is responsible for creating different tasks using Celery and executing them on a remote host. There are 4 different types of tasks:</p> <ul> <li>DeploymentTask</li> <li>Deploys containers in docker</li> <li>Deploys VMs using KVM</li> <li>Creates connections between containers and VMs using an OVS bridge</li> <li>RemovalTask</li> <li>Removes a running lab</li> <li>MirrorInterfaceTask</li> <li>Creates a mirror interface on a connection</li> <li>SnapshotTask</li> <li>Takes a snapshot of a running lab</li> </ul>"},{"location":"architecture/kvm-docker-ltb-architecture/#reservations","title":"Reservations","text":"<p>The reservation component is responsible for reserving system resources in advance. It is responsible for the following tasks:</p> <ul> <li>Create a reservation</li> <li>Delete a reservation</li> <li>Update a reservation</li> </ul>"},{"location":"architecture/kvm-docker-ltb-architecture/#running-lab-store","title":"Running lab store","text":"<p>This component is responsible for storing information about running labs, such as:</p> <ul> <li>The devices taking part in the running lab, inclusive of the interfaces</li> <li>Connection information</li> </ul>"},{"location":"architecture/kvm-docker-ltb-architecture/#template-store","title":"Template store","text":"<p>This component is responsible for storing lab templates.</p>"},{"location":"architecture/kvm-docker-ltb-architecture/#authentication","title":"Authentication","text":"<p>This component is responsible for user authentication and management.</p>"},{"location":"architecture/kvm-docker-ltb-architecture/#deployment","title":"Deployment","text":"<p>The deployment component is responsible for deploying the LTB backend and frontend components.</p>"},{"location":"architecture/kvm-docker-ltb-architecture/#frontend","title":"Frontend","text":"<p>The frontend allows users to access their labs and their devices.</p>"},{"location":"decisions/","title":"Decisions","text":"<p>This directory contains decision records for the Kubernetes based Lab Topology Builder.</p> <p>For new ADRs, please use adr-template.md as basis. More information on MADR is available at https://adr.github.io/madr/. General information about architectural decision records is available at https://adr.github.io/.</p>"},{"location":"decisions/0000-use-markdown-architectural-decision-records/","title":"Use Markdown Architectural Decision Records","text":""},{"location":"decisions/0000-use-markdown-architectural-decision-records/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>We want to record design decisions made in this project. Which format and structure should these records follow?</p>"},{"location":"decisions/0000-use-markdown-architectural-decision-records/#considered-options","title":"Considered Options","text":"<ul> <li>MADR 2.1.2 \u2013 The Markdown Architectural Decision Records</li> <li>Michael Nygard's template \u2013 The first incarnation of the term \"ADR\"</li> <li>Sustainable Architectural Decisions \u2013 The Y-Statements</li> <li>Other templates listed at https://github.com/joelparkerhenderson/architecture_decision_record</li> <li>Formless \u2013 No conventions for file format and structure</li> </ul>"},{"location":"decisions/0000-use-markdown-architectural-decision-records/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"MADR 2.1.2\", because</p> <ul> <li>Implicit assumptions should be made explicit.   Design documentation is important to enable people understanding the decisions later on.   See also A rational design process: How and why to fake it.</li> <li>The MADR format is lean and fits our development style.</li> <li>The MADR structure is comprehensible and facilitates usage &amp; maintenance.</li> <li>The MADR project is vivid.</li> <li>Version 2.1.2 is the latest one available when starting to document ADRs.</li> <li>A Visual Studio Code extension ADR Manager for MADR exits, which makes managing ADRs easy.</li> </ul>"},{"location":"decisions/adr-template/","title":"Template for Design Decisions","text":""},{"location":"decisions/adr-template/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>{Describe the context and problem statement, e.g., in free form using two to three sentences or in the form of an illustrative story.  You may want to articulate the problem in form of a question and add links to collaboration boards or issue management systems.}</p>"},{"location":"decisions/adr-template/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>{decision driver 1, e.g., a force, facing concern, \u2026}</li> <li>{decision driver 2, e.g., a force, facing concern, \u2026}</li> <li>\u2026 </li> </ul>"},{"location":"decisions/adr-template/#considered-options","title":"Considered Options","text":"<ul> <li>{title of option 1}</li> <li>{title of option 2}</li> <li>{title of option 3}</li> <li>\u2026 </li> </ul>"},{"location":"decisions/adr-template/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"{title of option 1}\", because {justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force {force} | \u2026 | comes out best (see below)}.</p>"},{"location":"decisions/adr-template/#positive-consequences","title":"Positive Consequences","text":"<ul> <li>{e.g., improvement of one or more desired qualities, \u2026}</li> <li>\u2026</li> </ul>"},{"location":"decisions/adr-template/#negative-consequences","title":"Negative Consequences","text":"<ul> <li>{e.g., compromising one or more desired qualities, \u2026}</li> <li>\u2026</li> </ul>"},{"location":"decisions/adr-template/#validation","title":"Validation","text":"<p>{describe how the implementation of/compliance with the ADR is validated. E.g., by a review or an ArchUnit test}</p>"},{"location":"decisions/adr-template/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"decisions/adr-template/#title-of-option-1","title":"{title of option 1}","text":"<p>{example | description | pointer to more information | \u2026}</p> <ul> <li>Good, because {argument a}</li> <li>Good, because {argument b}</li> </ul> <ul> <li>Neutral, because {argument c}</li> <li>Bad, because {argument d}</li> <li>\u2026 </li> </ul>"},{"location":"decisions/adr-template/#title-of-other-option","title":"{title of other option}","text":"<p>{example | description | pointer to more information | \u2026}</p> <ul> <li>Good, because {argument a}</li> <li>Good, because {argument b}</li> <li>Neutral, because {argument c}</li> <li>Bad, because {argument d}</li> <li>\u2026</li> </ul>"},{"location":"decisions/adr-template/#more-information","title":"More Information","text":"<p>{You might want to provide additional evidence/confidence for the decision outcome here and/or  document the team agreement on the decision and/or  define when this decision when and how the decision should be realized and if/when it should be re-visited and/or  how the decision is validated.  Links to other decisions and resources might here appear as well.}</p>"}]}