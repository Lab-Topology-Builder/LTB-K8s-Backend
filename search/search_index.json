{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LTB Kubernetes Operator Documentation","text":"<p>The LTB Kubernetes Operator manages LTB Lab Template Deployments.</p>"},{"location":"concepts/","title":"Concepts","text":""},{"location":"concepts/#lab-topology-builder","title":"Lab Topology Builder","text":"<p>Lab Topology Builder (LTB) is a tool that allows you to build a topology of virtual machines and containers, which are connected to each other according to the network topology you have defined.</p>"},{"location":"concepts/#kubernetes-operator","title":"Kubernetes Operator","text":""},{"location":"dev-setup/","title":"Development setup","text":""},{"location":"dev-setup/#prerequisites","title":"Prerequisites","text":"<p>WSL version 0.67.6 and higher</p> <p>Active Ubuntu WSL needed: <pre><code>sudo vim /etc/wsl.conf\n</code></pre> <pre><code># /etc/wsl.conf\n[boot]\nsystemd=true\n</code></pre> Restart WSL with <code>wsl.exe --shutdown</code> and opening the WSL again.</p>"},{"location":"dev-setup/#option-1-k3s-install","title":"Option 1: K3S install","text":"<p><pre><code>sudo mkdir -p /etc/rancher/k3s/\nsudo vim /etc/rancher/k3s/config.yaml\nwrite-kubeconfig-mode: \"0644\"\n</code></pre> <pre><code>curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=\"v1.26.1+k3s1\" sudo -E sh -\n</code></pre></p>"},{"location":"dev-setup/#option-2-k3d-install","title":"Option 2: K3D install","text":"<p>Prerequisites: Docker Desktop installed and running or Docker installed in WSL <pre><code>curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | TAG=v5.4.7 bash\n</code></pre></p>"},{"location":"dev-setup/#operator-sdk-install","title":"Operator SDK install","text":""},{"location":"dev-setup/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>curl</li> <li>gpg\u00a0version 2.0+</li> </ul>"},{"location":"dev-setup/#1-download-the-release-binary","title":"1. Download the release binary","text":"<p>Set platform information: <pre><code>export ARCH=$(case $(uname -m) in x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(uname -m) ;; esac)\nexport OS=$(uname | awk '{print tolower($0)}')\n</code></pre></p> <p>Download the binary for your platform:</p> <pre><code>export OPERATOR_SDK_Version=1.26.1\nexport OPERATOR_SDK_DL_URL=https://github.com/operator-framework/operator-sdk/releases/download/${OPERATOR_SDK_Version}\ncurl -LO ${OPERATOR_SDK_DL_URL}/operator-sdk_${OS}_${ARCH}\n</code></pre>"},{"location":"dev-setup/#2-verify-the-downloaded-binary-optional","title":"2. Verify the downloaded binary (Optional)","text":"<p>Import the operator-sdk release GPG key from\u00a0<code>keyserver.ubuntu.com</code>:</p> <pre><code>gpg --keyserver keyserver.ubuntu.com --recv-keys 052996E2A20B5C7E\n</code></pre> <p>Download the checksums file and its signature, then verify the signature (optional):</p> <pre><code>curl -LO ${OPERATOR_SDK_DL_URL}/checksums.txt\ncurl -LO ${OPERATOR_SDK_DL_URL}/checksums.txt.asc\ngpg -u \"Operator SDK (release) &lt;cncf-operator-sdk@cncf.io&gt;\" --verify checksums.txt.asc\n</code></pre> <p>You should see something similar to the following:</p> <pre><code>gpg: assuming signed data in 'checksums.txt'\ngpg: Signature made Fri 30 Oct 2020 12:15:15 PM PDT\ngpg:                using RSA key ADE83605E945FA5A1BD8639C59E5B47624962185\ngpg: Good signature from \"Operator SDK (release) &lt;cncf-operator-sdk@cncf.io&gt;\" [ultimate]\n</code></pre> <p>Make sure the checksums match:</p> <pre><code>grep operator-sdk_${OS}_${ARCH} checksums.txt | sha256sum -c -\n</code></pre> <p>You should see something similar to the following:</p> <pre><code>operator-sdk_linux_amd64: OK\n</code></pre>"},{"location":"dev-setup/#3-install-the-release-binary-in-your-path","title":"3. Install the release binary in your PATH","text":"<p><pre><code>chmod +x operator-sdk_${OS}_${ARCH} &amp;&amp; sudo mv operator-sdk_${OS}_${ARCH} /usr/local/bin/\n</code></pre> Verify the installation:</p> <pre><code>operator-sdk version\n</code></pre>"},{"location":"dev-setup/#install-go","title":"Install Go","text":"<p>Step 1 - Downloading Go lang binary files Visit official downloads page and grab file using either wget command or curl command: <pre><code># let us download a file with curl on Linux command line #\nGO_VERSION=\"1.20.1\" # go version\nARCH=\"amd64\" # go archicture\nwget -L \"https://golang.org/dl/go${GO_VERSION}.linux-${ARCH}.tar.gz\"\nrm -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf go1.20.1.linux-amd64.tar.gz\n</code></pre></p> <p>Step 2  - Add to PATH <pre><code>echo 'export PATH=\"$PATH:/usr/local/go/bin\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre></p> <p>Step 3 - Verify that you've installed Go by opening a command prompt and typing the following command: <pre><code>go version\n</code></pre></p>"},{"location":"architecture/ltb-architecture/","title":"Lab Topology Builder Architecture","text":""},{"location":"architecture/ltb-architecture/#ltbv1-architecture","title":"LTBv1 Architecture","text":"<p>Currently the LTB is composed of two main components:</p> <ul> <li>Frontend built with React</li> <li>Backend built with Django</li> <li>Deployment built with docker-compose</li> </ul>"},{"location":"architecture/ltb-architecture/#backend","title":"Backend","text":"<p>The backend is accessible via API and a Admin Web UI. It is responsible for the following tasks:</p> <ul> <li>Parsing the YAML topology files</li> <li>Deploying/Destroying the containers and VMs</li> <li>Exposes status of lab deployments</li> <li>Exposes information on how to access the deployed containers and VMs</li> <li>Provides remote SSH capabilities</li> <li>Provides remote Wireshark capture capabilities</li> <li>Managing reservations (Create, Delete, etc.)</li> <li>Exposes node resource usage</li> <li>User Management</li> <li>Exposes information about a device (version, groups, etc.)</li> <li>Exposes device metrics</li> </ul> <p>It is composed of the following components:</p> <ul> <li>Lab Topology Builder Architecture</li> <li>LTBv1 Architecture<ul> <li>Backend</li> <li>Orchestration</li> <li>Reservations</li> <li>Running lab store</li> <li>Template store</li> <li>Authentication</li> <li>Deployment</li> <li>Frontend</li> </ul> </li> </ul>"},{"location":"architecture/ltb-architecture/#orchestration","title":"Orchestration","text":"<p>The orchestration component is responsible for creating different tasks using Celery and executing them on a remote host. There are 4 different types of tasks:</p> <ul> <li>DeploymentTask</li> <li>Deploys containers in docker</li> <li>Deploys VMs using KVM</li> <li>Creates connections between containers and VMs using an OVS bridge</li> <li>RemovalTask</li> <li>Removes a running lab</li> <li>MirrorInterfaceTask</li> <li>Creates a mirror interface on a connection</li> <li>SnapshotTask</li> <li>Takes a snapshot of a running lab</li> </ul>"},{"location":"architecture/ltb-architecture/#reservations","title":"Reservations","text":"<p>The reservation component is responsible for reserving system resources in advance. It is responsible for the following tasks:</p> <ul> <li>Create a reservation</li> <li>Delte a reservation</li> <li>Update a reservation</li> </ul>"},{"location":"architecture/ltb-architecture/#running-lab-store","title":"Running lab store","text":"<p>This component is responsible for storing information about running labs, such as:</p> <ul> <li>The devices taking part in the running lab, inclusive of the interfaces</li> <li>Connection information</li> </ul>"},{"location":"architecture/ltb-architecture/#template-store","title":"Template store","text":"<p>This component is responsible for storing lab templates.</p>"},{"location":"architecture/ltb-architecture/#authentication","title":"Authentication","text":"<p>This component is responsible for user authentication and management.</p>"},{"location":"architecture/ltb-architecture/#deployment","title":"Deployment","text":"<p>The deployment component is responsible for deploying the LTB backend and frontend components.</p>"},{"location":"architecture/ltb-architecture/#frontend","title":"Frontend","text":""}]}