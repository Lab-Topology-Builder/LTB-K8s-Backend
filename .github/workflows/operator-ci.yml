name: Operator CI
on:
    push:
        branches: [ "main" ]
        # Publish semver tags as releases
        tags: [ 'v*.*.*' ]
        paths-ignore:
            - 'docs/**'
    pull_request:
        branches: [ "main" ]
        paths-ignore:
            - 'docs/**'
env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}
    OPERATOR_SDK_VERSION: v1.28.0
    OS: linux
    TARGETARCH: amd64
jobs:
    test:
        runs-on: ubuntu-latest
        permissions:
            contents: read
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
            - name: Setup Go environment
              uses: actions/setup-go@v4
              with:
                go-version: '1.20'
            - name: Install dependencies
              run: |
                  go mod download
                  go mod verify
            - name: Run tests
              run: "make test"
            - name: Upload coverage reports to Codecov
              uses: codecov/codecov-action@v3

    publish:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
            id-token: write
        needs: test
        steps:
        - name: Checkout repository
          uses: actions/checkout@v3

        # Install the cosign tool except on PR
        # https://github.com/sigstore/cosign-installer
        - name: Install cosign
          if: github.event_name != 'pull_request'
          uses: sigstore/cosign-installer@main
          with:
            cosign-release: main

        # Workaround: https://github.com/docker/build-push-action/issues/461
        - name: Setup Docker buildx
          uses: docker/setup-buildx-action@v2

        # Login to registry except on PR
        # https://github.com/docker/login-action
        - name: Log into registry ${{ env.REGISTRY }}
          uses: docker/login-action@v2
          with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        # Extract metadata (tags, labels) for Docker
        # https://github.com/docker/metadata-action
        - name: Extract Docker metadata
          id: meta
          uses: docker/metadata-action@v4
          with:
            images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

        # Build and push Docker image with Buildx (don't push on PR)
        # https://github.com/docker/build-push-action
        - name: Build and push Docker image
          id: build-and-push
          uses: docker/build-push-action@v4
          with:
            context: .
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
            cache-from: type=gha
            cache-to: type=gha,mode=max

        - name: Install operator-sdk
          run: |
              curl -LO https://github.com/operator-framework/operator-sdk/releases/download/${OPERATOR_SDK_VERSION}/operator-sdk_${OS}_${TARGETARCH} \
              && chmod +x operator-sdk_${OS}_${TARGETARCH} \
              && mv operator-sdk_${OS}_${TARGETARCH} /usr/local/bin/operator-sdk \
              && echo $(operator-sdk version)
        - name: Create Bundle and Catalog and push to registry
          run: |
              make bundle
              make bundle-build bundle-push
              make catalog-build catalog-push

            # Sign the resulting Docker image digest except on PRs.
            # This will only write to the public Rekor transparency log when the Docker
            # repository is public to avoid leaking data.  If you would like to publish
            # transparency data even for private images, pass --force to cosign below.
            # https://github.com/sigstore/cosign
            - name: Sign the published Docker image
              if: ${{ github.event_name != 'pull_request' }}
              env:
                COSIGN_EXPERIMENTAL: "true"
                # This step uses the identity token to provision an ephemeral certificate
                # against the sigstore community Fulcio instance.
              run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
